import { useState, useEffect } from "react";
import ContainerPagesAdmin from "../../components/AdminComponents/ContainerPagesAdmin";
import machinecouture from "../../assets/machinecouture.png";
import revenir from "../../assets/avancerjaune.png";
import avancer from "../../assets/revenirjaune.png";
import "../../style/AdminStyle/Dashboard.css";
import Courbe from "@/components/AdminComponents/Courbe";
import { useNavigate } from "react-router-dom";
import useErreur401Handler from '../../components/generalComponents/Erreur401Handle'

function Dashboard() {
  const navigate = useNavigate();
    const { handle401Error } = useErreur401Handler();

  // √âtats pour suivre l'index courant de chaque section
  const [currentCouturiereIndex, setCurrentCouturiereIndex] = useState(0);
  const [currentAffiliateIndex, setCurrentAffiliateIndex] = useState(0);
  const [currentModelIndex, setCurrentModelIndex] = useState(0);
  
  // √âtat pour les mod√®les les plus vendus
  const [mostSoldModels, setMostSoldModels] = useState([]);
  const [loadingModels, setLoadingModels] = useState(true);
  const [errorModels, setErrorModels] = useState(null);
  
  // √âtat pour les couturi√®res les plus actives
  const [mostActiveCouturieres, setMostActiveCouturieres] = useState([]);
  const [loadingCouturieres, setLoadingCouturieres] = useState(true);
  const [errorCouturieres, setErrorCouturieres] = useState(null);
  const [isTie, setIsTie] = useState(false);
  const [hasActiveCouturiere, setHasActiveCouturiere] = useState(false);

  // √âtat pour les affili√©s les plus actifs
  const [mostActiveAffiliates, setMostActiveAffiliates] = useState([]);
  const [loadingAffiliates, setLoadingAffiliates] = useState(true);
  const [errorAffiliates, setErrorAffiliates] = useState(null);
  const [isTieAffiliates, setIsTieAffiliates] = useState(false);
  const [hasActiveAffiliate, setHasActiveAffiliate] = useState(false);

  // Fonction pour r√©cup√©rer les mod√®les les plus vendus
  const fetchMostSoldModels = async () => {
    try {
      setLoadingModels(true);
      setErrorModels(""); // Reset des erreurs
      const token = localStorage.getItem("accessToken");
      
      console.log("üîç === D√âBUT DEBUG fetchMostSoldModels ===");
      console.log("üìù Token pr√©sent:", !!token);
      if (token) {
        console.log("üìù Token length:", token.length);
        console.log("üìù Token d√©but:", token.substring(0, 20) + "...");
      }
      
      if (!token) {
        console.error("‚ùå Aucun token trouv√© - redirection vers login");
        navigate("/admin/login");
        return;
      }
      
      const apiUrl = "https://api.kadi-inv.store/adminapi/most-demanded-models";
      console.log("üåê URL appel√©e:", apiUrl);
      
      const requestOptions = {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        // Ajout pour √©viter le cache
        cache: 'no-cache'
      };
      
      console.log("üì§ Headers envoy√©s:", requestOptions.headers);
      
      const startTime = Date.now();
      const response = await fetch(apiUrl, requestOptions);
      const endTime = Date.now();
      
      console.log("üì• R√©ponse re√ßue en", endTime - startTime + "ms");
      console.log("üìä Status HTTP:", response.status);
      console.log("üìä Status text:", response.statusText);
      console.log("üìä OK:", response.ok);
      console.log("üìä Redirig√©:", response.redirected);
      console.log("üìä Type:", response.type);
      
      // Afficher tous les headers de r√©ponse
      console.log("üìã Headers de r√©ponse:");
      response.headers.forEach((value, key) => {
        console.log(`   ${key}: ${value}`);
      });
      
      const contentType = response.headers.get('content-type');
      console.log("üìÑ Content-Type:", contentType);
      
      // V√©rifier si c'est du HTML (erreur)
      if (contentType && contentType.includes('text/html')) {
        console.warn("‚ö†Ô∏è  R√©ponse HTML d√©tect√©e (probable page d'erreur)");
        const htmlText = await response.text();
        console.log("üìù Contenu HTML (premiers 500 caract√®res):", htmlText.substring(0, 500));
        
        // V√©rifier les erreurs courantes dans le HTML
        if (htmlText.includes('CSRF') || htmlText.includes('csrf')) {
          throw new Error('Erreur CSRF d√©tect√©e');
        }
        if (htmlText.includes('Forbidden') || htmlText.includes('403')) {
          throw new Error('Acc√®s interdit (403)');
        }
        if (htmlText.includes('Not Found') || htmlText.includes('404')) {
          throw new Error('Endpoint non trouv√© (404)');
        }
        if (htmlText.includes('Server Error') || htmlText.includes('500')) {
          throw new Error('Erreur serveur (500)');
        }
        
        throw new Error(`R√©ponse HTML re√ßue au lieu de JSON. Status: ${response.status}`);
      }
      
      if (response.status === 401) {
        console.log("üîê 401 Unauthorized - Token probablement expir√©");
        const refreshSuccess = await handle401Error("/admin/login");
        if (refreshSuccess) {
          console.log("üîÑ Token rafra√Æchi - Nouvel essai");
          return fetchMostSoldModels();
        } else {
          console.error("‚ùå √âchec du rafra√Æchissement du token");
          return;
        }
      }
      
      if (response.status === 403) {
        console.log("üö´ 403 Forbidden - Probl√®me de permissions");
        const errorText = await response.text();
        console.log("üìù Contenu erreur 403:", errorText);
        setErrorModels("Permission refus√©e. Seuls les administrateurs peuvent acc√©der √† ces donn√©es.");
        setLoadingModels(false);
        return;
      }
      
      if (response.status === 404) {
        console.error("‚ùå 404 Not Found - URL incorrecte");
        const errorText = await response.text();
        console.log("üìù Contenu erreur 404:", errorText);
        throw new Error(`Endpoint non trouv√©. V√©rifiez l'URL: ${apiUrl}`);
      }
      
      if (!response.ok) {
        console.error(`‚ùå Erreur HTTP: ${response.status}`);
        // Essayer de lire le message d'erreur
        let errorDetail = `Status: ${response.status}`;
        try {
          const errorText = await response.text();
          console.log("üìù Contenu erreur:", errorText);
          errorDetail += ` - ${errorText}`;
        } catch (e) {
          console.log("üìù Impossible de lire le contenu d'erreur");
        }
        throw new Error(errorDetail);
      }
      
      // V√©rifier que c'est bien du JSON avant de parser
      if (!contentType || !contentType.includes('application/json')) {
        const rawText = await response.text();
        console.error("‚ùå Content-Type non-JSON:", contentType);
        console.error("üìù Contenu brut re√ßu:", rawText.substring(0, 500));
        throw new Error(`Content-Type invalide: ${contentType}. Attendu: application/json`);
      }
      
      console.log("‚úÖ Format JSON d√©tect√© - parsing...");
      const data = await response.json();
      console.log("üì¶ Donn√©es JSON pars√©es:", data);
      
      if (data.most_sold_models === 'none') {
        console.log("‚ÑπÔ∏è  Aucun mod√®le vendu trouv√©");
        setMostSoldModels([]);
      } else {
        console.log(`‚úÖ ${data.most_sold_models.length} mod√®le(s) trouv√©(s)`);
        setMostSoldModels(data.most_sold_models);
      }
      
      setLoadingModels(false);
      console.log("üéâ === FIN SUCC√àS fetchMostSoldModels ===");
      
    } catch (err) {
      console.error("üí• === ERREUR COMPL√àTE fetchMostSoldModels ===");
      console.error("üí• Type d'erreur:", err.constructor.name);
      console.error("üí• Message:", err.message);
      console.error("üí• Stack:", err.stack);
      
      // Gestion sp√©cifique des erreurs r√©seau
      if (err.name === 'TypeError' && err.message.includes('fetch')) {
        console.error("üåê Erreur r√©seau - V√©rifiez la connexion");
        setErrorModels("Erreur de connexion r√©seau. V√©rifiez votre internet.");
      } 
      // Erreur de parsing JSON
      else if (err.name === 'SyntaxError' && err.message.includes('JSON')) {
        console.error("üìÑ Erreur de parsing JSON");
        setErrorModels("Erreur de format des donn√©es re√ßues.");
      }
      // Erreur CORS
      else if (err.name === 'TypeError' && err.message.includes('CORS')) {
        console.error("üõ°Ô∏è  Erreur CORS");
        setErrorModels("Erreur de s√©curit√© CORS. Contactez l'administrateur.");
      }
      else {
        console.error("‚ùå Erreur non sp√©cifique");
        setErrorModels(`Erreur d√©taill√©e: ${err.message}`);
      }
      
      setLoadingModels(false);
      console.error("üíî === FIN ERREUR fetchMostSoldModels ===");
    }
  };

  // Fonction pour r√©cup√©rer les couturi√®res les plus actives
  const fetchMostActiveCouturieres = async () => {
    try {
      setLoadingCouturieres(true);
      const token = localStorage.getItem("accessToken");
      
     
      
      const response = await fetch("https://api.kadi-inv.store/adminapi/GetMostActiveCouturiere", {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });
      
      if (response.status === 401) {
        const refreshSuccess = await handle401Error("/admin/login");
        if (refreshSuccess) {
          // R√©essayer la requ√™te avec le nouveau token
          return fetchMostActiveCouturieres ();
        }
      }
      else
      
      if (response.status === 403) {
        setErrorCouturieres("Permission refus√©e. Seuls les administrateurs peuvent acc√©der √† ces donn√©es.");
        setLoadingCouturieres(false);
        return;
      }
      
      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Traitement des diff√©rents cas de r√©ponse
      if (!data.has_active_couturiere) {
        // Aucune couturi√®re active trouv√©e
        setMostActiveCouturieres([]);
        setHasActiveCouturiere(false);
      } else if (data.is_tie) {
        // Plusieurs couturi√®res avec le m√™me nombre de ventes
        setMostActiveCouturieres(data.most_active_couturieres || []);
        setIsTie(true);
        setHasActiveCouturiere(true);
      } else {
        // Une seule couturi√®re la plus active
        setMostActiveCouturieres(data.most_active_couturiere ? [data.most_active_couturiere] : []);
        setIsTie(false);
        setHasActiveCouturiere(true);
      }
      
      setLoadingCouturieres(false);
    } catch (err) {
      console.error("Erreur lors de la r√©cup√©ration des couturi√®res:", err);
      setErrorCouturieres("Erreur lors de la r√©cup√©ration des donn√©es");
      setLoadingCouturieres(false);
    }
  };

  // Fonction pour r√©cup√©rer les affili√©s les plus actifs
  const fetchMostActiveAffiliates = async () => {
    try {
      setLoadingAffiliates(true);
      const token = localStorage.getItem("accessToken");
      
     
      
      const response = await fetch("https://api.kadi-inv.store/adminapi/getmostActifAffilier", {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });
      
      if (response.status === 401) {
        const refreshSuccess = await handle401Error("/admin/login");
        if (refreshSuccess) {
          // R√©essayer la requ√™te avec le nouveau token
          return fetchMostActiveAffiliates ();
        }
      }
      else
      
      if (response.status === 403) {
        setErrorAffiliates("Permission refus√©e. Seuls les administrateurs peuvent acc√©der √† ces donn√©es.");
        setLoadingAffiliates(false);
        return;
      }
      
      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Traitement des diff√©rents cas de r√©ponse
      if (data.most_active_affiliates.length === 0) {
        // Aucun affili√© actif trouv√©
        setMostActiveAffiliates([]);
        setHasActiveAffiliate(false);
      } else if (data.most_active_affiliates.length > 1) {
        // Plusieurs affili√©s avec le m√™me nombre de commandes
        setMostActiveAffiliates(data.most_active_affiliates);
        setIsTieAffiliates(true);
        setHasActiveAffiliate(true);
      } else {
        // Un seul affili√© le plus actif
        setMostActiveAffiliates(data.most_active_affiliates);
        setIsTieAffiliates(false);
        setHasActiveAffiliate(true);
      }
      
      setLoadingAffiliates(false);
    } catch (err) {
      console.error("Erreur lors de la r√©cup√©ration des affili√©s:", err);
      setErrorAffiliates("Erreur lors de la r√©cup√©ration des donn√©es");
      setLoadingAffiliates(false);
    }
  };

  // Charger les donn√©es au montage du composant
  useEffect(() => {
    fetchMostSoldModels();
    fetchMostActiveCouturieres();
    fetchMostActiveAffiliates();
  }, []);

  // Fonctions pour naviguer vers l'√©l√©ment pr√©c√©dent
  const prevCouturiere = () => {
    if (mostActiveCouturieres.length <= 1) return;
    setCurrentCouturiereIndex(prevIndex => 
      prevIndex === 0 ? mostActiveCouturieres.length - 1 : prevIndex - 1
    );
  };

  const prevAffiliate = () => {
    if (mostActiveAffiliates.length <= 1) return;
    setCurrentAffiliateIndex(prevIndex => 
      prevIndex === 0 ? mostActiveAffiliates.length - 1 : prevIndex - 1
    );
  };

  const prevModel = () => {
    if (mostSoldModels.length <= 1) return;
    setCurrentModelIndex(prevIndex => 
      prevIndex === 0 ? mostSoldModels.length - 1 : prevIndex - 1
    );
  };

  // Fonctions pour naviguer vers l'√©l√©ment suivant
  const nextCouturiere = () => {
    if (mostActiveCouturieres.length <= 1) return;
    setCurrentCouturiereIndex(prevIndex => 
      prevIndex === mostActiveCouturieres.length - 1 ? 0 : prevIndex + 1
    );
  };

  const nextAffiliate = () => {
    if (mostActiveAffiliates.length <= 1) return;
    setCurrentAffiliateIndex(prevIndex => 
      prevIndex === mostActiveAffiliates.length - 1 ? 0 : prevIndex + 1
    );
  };

  const nextModel = () => {
    if (mostSoldModels.length <= 1) return;
    setCurrentModelIndex(prevIndex => 
      prevIndex === mostSoldModels.length - 1 ? 0 : prevIndex + 1
    );
  };

  return (
    <ContainerPagesAdmin
      titre="ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ"
      soustitre="ÿßÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿπÿßŸÖÿ© ÿ≠ŸàŸÑ ŸÖÿØÿßÿÆŸäŸÑ ÿßŸÑŸÖÿ™ÿ¨ÿ± Ÿà ŸÜÿ¥ÿßÿ∑ ÿßŸÑÿπŸÖŸÑÿßÿ°"
    >
      {/* Cartes machines */}
      <div className="Cardselements">
        {/* Couturi√®re - Affiche les fl√®ches seulement s'il y a plusieurs √©l√©ments */}
        <div className="machine-card">
          <img src={machinecouture} alt="machine" className="machine-img" />
          <div className="machine-content">
            <p className="title">ÿßŸÑÿÆŸäÿßÿ∑ÿ© ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÖŸáÿßÿ±ÿ©</p>
            
            {loadingCouturieres ? (
              <div className="value-container">
                <p>ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...</p>
              </div>
            ) : errorCouturieres ? (
              <div className="value-container">
                <p className="error">{errorCouturieres}</p>
              </div>
            ) : !hasActiveCouturiere ? (
              <div className="value-container">
                <h3 className="value">ŸÑÿß ŸäŸàÿ¨ÿØ</h3>
              </div>
            ) : (
              <div className={`containerarrow-elements ${mostActiveCouturieres.length === 1 ? 'single-item-center' : ''}`}>
                {mostActiveCouturieres.length > 1 && (
                  <img 
                    src={revenir} 
                    alt="prev" 
                    className="arrow" 
                    onClick={prevCouturiere}
                  />
                )}
                
                <div className="value-container">
                  <h3 className="value">{mostActiveCouturieres[currentCouturiereIndex]?.full_name}</h3>
                  
                  <div className="code">{mostActiveCouturieres[currentCouturiereIndex]?.phone_number}</div>
                </div>
                
                {mostActiveCouturieres.length > 1 && (
                  <img 
                    src={avancer} 
                    alt="next" 
                    className="arrow" 
                    onClick={nextCouturiere}
                  />
                )}
              </div>
            )}
          </div>
        </div>

        {/* Affiliate - Section r√©elle avec donn√©es de l'API */}
        <div className="machine-card">
          <img src={machinecouture} alt="machine" className="machine-img" />
          <div className="machine-content">
            <p className="title">ÿßŸÑŸÖÿ±Ÿàÿ¨ ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÜÿ¥ÿßÿ∑ÿß</p>
            
            {loadingAffiliates ? (
              <div className="value-container">
                <p>ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...</p>
              </div>
            ) : errorAffiliates ? (
              <div className="value-container">
                <p className="error">{errorAffiliates}</p>
              </div>
            ) : !hasActiveAffiliate ? (
              <div className="value-container">
                <h3 className="value">ŸÑÿß ŸäŸàÿ¨ÿØ</h3>
              </div>
            ) : (
              <div className={`containerarrow-elements ${mostActiveAffiliates.length === 1 ? 'single-item-center' : ''}`}>
                {mostActiveAffiliates.length > 1 && (
                  <img 
                    src={revenir} 
                    alt="prev" 
                    className="arrow" 
                    onClick={prevAffiliate}
                  />
                )}
                
                <div className="value-container">
                  <h3 className="value">{mostActiveAffiliates[currentAffiliateIndex]?.full_name}</h3>
                  <div className="code">{mostActiveAffiliates[currentAffiliateIndex]?.phone_number || "ŸÑÿß ŸäŸàÿ¨ÿØ ÿ±ŸÇŸÖ"}</div>
                
                </div>
                
                {mostActiveAffiliates.length > 1 && (
                  <img 
                    src={avancer} 
                    alt="next" 
                    className="arrow" 
                    onClick={nextAffiliate}
                  />
                )}
              </div>
            )}
          </div>
        </div>
        
        {/* Meilleur mod√®le - Affiche les fl√®ches seulement s'il y a plusieurs √©l√©ments */}
        <div className="machine-card">
          <img src={machinecouture} alt="machine" className="machine-img" />
          <div className="machine-content">
            <p className="title">ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨ ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÖÿ®ŸäÿπÿßŸã</p>
            
            {loadingModels ? (
              <div className="value-container">
                <p>ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...</p>
              </div>
            ) : errorModels ? (
              <div className="value-container">
                <p className="error">{errorModels}</p>
              </div>
            ) : mostSoldModels.length === 0 ? (
              <div className="value-container">
                <h3 className="value">ŸÑÿß ŸäŸàÿ¨ÿØ</h3>
              </div>
            ) : (
              <div className={`containerarrow-elements ${mostSoldModels.length === 1 ? 'single-item-center' : ''}`}>
                {mostSoldModels.length > 1 && (
                  <img 
                    src={revenir} 
                    alt="prev" 
                    className="arrow" 
                    onClick={prevModel}
                  />
                )}
                
                <div className="value-container">
                  <h3 className="value">{mostSoldModels[currentModelIndex].name}</h3>
                  <div className="code">{mostSoldModels[currentModelIndex].code}</div>
                </div>
                
                {mostSoldModels.length > 1 && (
                  <img 
                    src={avancer} 
                    alt="next" 
                    className="arrow" 
                    onClick={nextModel}
                  />
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Section graphe */}
      <div className="courbesection">
        <Courbe/>
      </div>
    </ContainerPagesAdmin>
  );
}

export default Dashboard;
